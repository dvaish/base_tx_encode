// Generated by CIRCT unknown git version
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module FirFilter(	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
  input        clock,	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
  input  [7:0] io_in,	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
  input  [7:0] io_weights_0,	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
  input  [7:0] io_weights_1,	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
  input  [7:0] io_weights_2,	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
  input  [7:0] io_weights_3,	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
  input  [7:0] io_weights_4,	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
  input  [7:0] io_weights_5,	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
  input  [7:0] io_weights_6,	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
  output [7:0] io_out	// @[generators/chipyard/src/main/scala/FFE.scala:82:14]
);

  reg  [7:0]  inStage1;	// @[generators/chipyard/src/main/scala/FFE.scala:88:25]
  reg  [7:0]  ys_1_REG;	// @[generators/chipyard/src/main/scala/FFE.scala:95:28]
  reg  [7:0]  ys_2_REG;	// @[generators/chipyard/src/main/scala/FFE.scala:95:28]
  reg  [7:0]  ys_3_REG;	// @[generators/chipyard/src/main/scala/FFE.scala:95:28]
  reg  [7:0]  ys_4_REG;	// @[generators/chipyard/src/main/scala/FFE.scala:95:28]
  reg  [7:0]  ys_5_REG;	// @[generators/chipyard/src/main/scala/FFE.scala:95:28]
  reg  [7:0]  ys_6_REG;	// @[generators/chipyard/src/main/scala/FFE.scala:95:28]
  reg  [7:0]  io_out_REG;	// @[generators/chipyard/src/main/scala/FFE.scala:100:20]
  wire [14:0] _GEN = {{7{inStage1[7]}}, inStage1};	// @[generators/chipyard/src/main/scala/FFE.scala:88:25, :92:59]
  wire [14:0] _ys_1_T = {{7{io_weights_5[7]}}, io_weights_5} * _GEN;	// @[generators/chipyard/src/main/scala/FFE.scala:92:59, :96:58]
  wire [8:0]  _ys_1_sum_T = {ys_1_REG[7], ys_1_REG} + _ys_1_T[14:6];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :95:28, :96:58]
  wire [14:0] _ys_2_T = {{7{io_weights_4[7]}}, io_weights_4} * _GEN;	// @[generators/chipyard/src/main/scala/FFE.scala:92:59, :96:58]
  wire [8:0]  _ys_2_sum_T = {ys_2_REG[7], ys_2_REG} + _ys_2_T[14:6];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :95:28, :96:58]
  wire [14:0] _ys_3_T = {{7{io_weights_3[7]}}, io_weights_3} * _GEN;	// @[generators/chipyard/src/main/scala/FFE.scala:92:59, :96:58]
  wire [8:0]  _ys_3_sum_T = {ys_3_REG[7], ys_3_REG} + _ys_3_T[14:6];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :95:28, :96:58]
  wire [14:0] _ys_4_T = {{7{io_weights_2[7]}}, io_weights_2} * _GEN;	// @[generators/chipyard/src/main/scala/FFE.scala:92:59, :96:58]
  wire [8:0]  _ys_4_sum_T = {ys_4_REG[7], ys_4_REG} + _ys_4_T[14:6];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :95:28, :96:58]
  wire [14:0] _ys_5_T = {{7{io_weights_1[7]}}, io_weights_1} * _GEN;	// @[generators/chipyard/src/main/scala/FFE.scala:92:59, :96:58]
  wire [8:0]  _ys_5_sum_T = {ys_5_REG[7], ys_5_REG} + _ys_5_T[14:6];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :95:28, :96:58]
  wire [14:0] _ys_6_T = {{7{io_weights_0[7]}}, io_weights_0} * _GEN;	// @[generators/chipyard/src/main/scala/FFE.scala:92:59, :96:58]
  wire [8:0]  _ys_6_sum_T = {ys_6_REG[7], ys_6_REG} + _ys_6_T[14:6];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :95:28, :96:58]
  wire [13:0] _ys_0_T = {{6{io_weights_6[7]}}, io_weights_6} * {{6{inStage1[7]}}, inStage1};	// @[generators/chipyard/src/main/scala/FFE.scala:88:25, :92:59]
  always @(posedge clock) begin	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
    inStage1 <= io_in;	// @[generators/chipyard/src/main/scala/FFE.scala:88:25]
    ys_1_REG <= _ys_0_T[13:6];	// @[generators/chipyard/src/main/scala/FFE.scala:92:{59,79}, :95:28]
    ys_2_REG <= $signed(_ys_1_sum_T) > 9'sh7F ? 8'h7F : $signed(_ys_1_sum_T) < -9'sh80 ? 8'h80 : _ys_1_sum_T[7:0];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :76:16, :77:12, :78:12, :95:28, src/main/scala/chisel3/util/Mux.scala:126:16]
    ys_3_REG <= $signed(_ys_2_sum_T) > 9'sh7F ? 8'h7F : $signed(_ys_2_sum_T) < -9'sh80 ? 8'h80 : _ys_2_sum_T[7:0];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :76:16, :77:12, :78:12, :95:28, src/main/scala/chisel3/util/Mux.scala:126:16]
    ys_4_REG <= $signed(_ys_3_sum_T) > 9'sh7F ? 8'h7F : $signed(_ys_3_sum_T) < -9'sh80 ? 8'h80 : _ys_3_sum_T[7:0];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :76:16, :77:12, :78:12, :95:28, src/main/scala/chisel3/util/Mux.scala:126:16]
    ys_5_REG <= $signed(_ys_4_sum_T) > 9'sh7F ? 8'h7F : $signed(_ys_4_sum_T) < -9'sh80 ? 8'h80 : _ys_4_sum_T[7:0];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :76:16, :77:12, :78:12, :95:28, src/main/scala/chisel3/util/Mux.scala:126:16]
    ys_6_REG <= $signed(_ys_5_sum_T) > 9'sh7F ? 8'h7F : $signed(_ys_5_sum_T) < -9'sh80 ? 8'h80 : _ys_5_sum_T[7:0];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :76:16, :77:12, :78:12, :95:28, src/main/scala/chisel3/util/Mux.scala:126:16]
    io_out_REG <= $signed(_ys_6_sum_T) > 9'sh7F ? 8'h7F : $signed(_ys_6_sum_T) < -9'sh80 ? 8'h80 : _ys_6_sum_T[7:0];	// @[generators/chipyard/src/main/scala/FFE.scala:68:14, :76:16, :77:12, :78:12, :100:20, src/main/scala/chisel3/util/Mux.scala:126:16]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
      `FIRRTL_BEFORE_INITIAL	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
    initial begin	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
        `INIT_RANDOM_PROLOG_	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
        end	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
        inStage1 = _RANDOM[1'h0][7:0];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :88:25]
        ys_1_REG = _RANDOM[1'h0][15:8];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :88:25, :95:28]
        ys_2_REG = _RANDOM[1'h0][23:16];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :88:25, :95:28]
        ys_3_REG = _RANDOM[1'h0][31:24];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :88:25, :95:28]
        ys_4_REG = _RANDOM[1'h1][7:0];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :95:28]
        ys_5_REG = _RANDOM[1'h1][15:8];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :95:28]
        ys_6_REG = _RANDOM[1'h1][23:16];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :95:28]
        io_out_REG = _RANDOM[1'h1][31:24];	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :95:28, :100:20]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
      `FIRRTL_AFTER_INITIAL	// @[generators/chipyard/src/main/scala/FFE.scala:59:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out = io_out_REG;	// @[generators/chipyard/src/main/scala/FFE.scala:59:7, :100:20]
endmodule

